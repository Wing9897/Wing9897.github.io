<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>自訂參數批量請求系統</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #007bff;
            --secondary-color: #6c757d;
            --success-color: #28a745;
            --danger-color: #dc3545;
            --warning-color: #ffc107;
            --info-color: #17a2b8;
            --light-bg: #f8f9fa;
            --card-bg: #ffffff;
            --shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        body { background-color: var(--light-bg); font-family: 'Segoe UI', sans-serif; }
        .container-fluid { padding: 25px; max-width: 1200px; margin: 0 auto; }
        .card { background-color: var(--card-bg); border: none; border-radius: 10px; box-shadow: var(--shadow); margin-bottom: 25px; transition: transform 0.2s ease; }
        .card:hover { transform: translateY(-2px); }
        .card-body { padding: 20px; }
        .card-title { font-size: 1.25rem; font-weight: 600; color: var(--primary-color); margin-bottom: 15px; }
        .table-container { max-height: 300px; overflow-y: auto; margin-top: 20px; }
        .request-status { max-height: 300px; overflow-y: auto; }
        .step-guide { background-color: #e9ecef; }
        .step-item { margin-bottom: 8px; padding-left: 25px; position: relative; font-size: 0.95rem; }
        .step-item::before { content: counters(step, ".") "."; counter-increment: step; position: absolute; left: 0; color: var(--primary-color); font-weight: 600; }
        .form-label { font-weight: 500; color: #343a40; }
        .table th { background-color: var(--primary-color); color: white; font-weight: 600; position: sticky; top: 0; z-index: 1; }
        .btn { padding: 8px 16px; border-radius: 6px; transition: all 0.2s ease; }
        .btn:hover { transform: translateY(-1px); box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1); }
        .btn-group-custom { display: flex; gap: 12px; justify-content: center; flex-wrap: wrap; }
        .status-item { padding: 15px; border-bottom: 1px solid #e9ecef; transition: background-color 0.3s; }
        .status-success { background-color: #d4edda; }
        .status-error { background-color: #f8d7da; }
        .result { word-wrap: break-word; font-size: 0.9rem; padding: 8px 12px; background-color: #f1f3f5; border-radius: 6px; margin-top: 8px; white-space: pre-wrap; }
        .result.success { color: #155724; border-left: 4px solid var(--success-color); }
        .result.error { color: #721c24; border-left: 4px solid var(--danger-color); }
        .status-header { display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 10px; padding: 5px 0; }
        .status-number { font-weight: 600; color: var(--primary-color); }
        .status-url { font-size: 0.85rem; color: #495057; word-break: break-all; max-width: 70%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
        .progress { height: 18px; border-radius: 4px; }
        .divider { border-top: 1px solid #e9ecef; margin: 20px 0; }
        .advanced-settings { display: none; }
        .advanced-settings.show { display: block; }
        @media (max-width: 768px) {
            .container-fluid { padding: 15px; }
            .table-container, .request-status { max-height: 200px; }
            .card-body { padding: 15px; }
            .btn { padding: 6px 12px; }
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row justify-content-center">
            <div class="col-12">
                <h2 class="mb-4 text-center text-primary">自訂參數批量請求系統</h2>

                <!-- 操作步驟指南 -->
                <div class="card step-guide">
                    <div class="card-body">
                        <h5 class="card-title">操作說明</h5>
                        <div style="counter-reset: step;">
                            <div class="step-item">導入配置（可選）：點擊「匯入配置」載入已有設置。</div>
                            <div class="step-item">設置請求：配置請求方法和模板。</div>
                            <div class="step-item">輸入參數：在參數管理區輸入或批量添加數據。</div>
                            <div class="step-item">輸入值並發送：輸入值並點擊「發送請求」執行批量請求。</div>
                        </div>
                    </div>
                </div>

                <!-- 請求配置區 -->
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">請求配置</h5>
                        <div class="mb-3">
                            <label for="request-method" class="form-label">請求方法</label>
                            <select class="form-select" id="request-method">
                                <option value="GET">GET</option>
                                <option value="POST">POST (JSON)</option>
                            </select>
                        </div>
                        <div class="mb-3" id="get-config">
                            <label for="get-url-template" class="form-label">GET URL 模板 <span class="text-muted">(使用 {InputValue}, {Parameter1} 等)</span></label>
                            <input type="text" class="form-control" id="get-url-template" placeholder="例如: https://api.example.com/check?qr={InputValue}&p1={Parameter1}">
                        </div>
                        <div id="post-config" style="display: none;">
                            <div class="mb-3">
                                <label for="post-url-template" class="form-label">POST URL 模板 <span class="text-muted">(使用 {InputValue}, {Parameter1} 等)</span></label>
                                <input type="text" class="form-control" id="post-url-template" placeholder="例如: https://api.example.com/submit">
                            </div>
                            <div class="mb-3">
                                <label for="post-body-template" class="form-label">POST JSON 模板 <span class="text-muted">(使用 {InputValue}, {Parameter1} 等)</span></label>
                                <textarea class="form-control" id="post-body-template" rows="4" placeholder='{
"CmdCode": "{Parameter1}",
"Params": "{Parameter2}",
"IMEI": "{InputValue}",
"CheckCode": "{Parameter3}"
}'></textarea>
                            </div>
                        </div>
                        <button class="btn btn-outline-secondary mb-3" id="toggle-advanced">進階設置</button>
                        <div class="advanced-settings" id="advanced-settings">
                            <div class="mb-3">
                                <label for="input-pre-modify-remove" class="form-label">InputValue 預移除字眼</label>
                                <input type="text" class="form-control" id="input-pre-modify-remove" placeholder="例如: 移除 IMEI= (輸入 IMEI=)" value="IMEI=">
                                <small class="form-text text-muted">輸入要移除的字眼，或留空不移除</small>
                            </div>
                            <div class="mb-3">
                                <label for="input-pre-modify-add" class="form-label">InputValue 預新增字眼</label>
                                <input type="text" class="form-control" id="input-pre-modify-add" placeholder="例如: 加入 ID= (輸入 ID=)">
                                <small class="form-text text-muted">輸入要加入的前綴，或留空不新增</small>
                            </div>
                            <div class="mb-3">
                                <label for="request-interval" class="form-label">每次請求間隔 (毫秒)</label>
                                <input type="number" class="form-control" id="request-interval" min="0" value="3000" step="100">
                                <small class="form-text text-muted">設置為 0 表示無間隔，建議 500ms 或以上</small>
                            </div>
                        </div>
                        <div class="btn-group-custom mt-4">
                            <button class="btn btn-warning" id="clear-storage">清空儲存</button>
                            <button class="btn btn-info" id="export-config">匯出配置</button>
                            <input type="file" id="import-config" accept=".json" style="display: none;">
                            <button class="btn btn-primary" id="import-config-btn">匯入配置</button>
                        </div>
                    </div>
                </div>

                <!-- 參數管理區 -->
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">參數管理</h5>
                        <textarea class="form-control" id="batch-input" rows="4" placeholder="批量輸入格式：每行一組數據，用空格分隔多項
例如：
value1 value2 value3
或
data1 data2 data3"></textarea>
                        <div class="btn-group-custom mt-3">
                            <button class="btn btn-primary" id="batch-submit">批量添加</button>
                            <button class="btn btn-secondary" id="add-row">單行添加</button>
                        </div>
                        <div class="divider"></div>
                        <div class="table-container">
                            <table class="table table-bordered table-striped">
                                <thead class="table-dark sticky-top">
                                    <tr id="table-header"></tr>
                                </thead>
                                <tbody id="data-table"></tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- 輸入區 -->
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">輸入值</h5>
                        <div class="mb-3">
                            <label for="input-value" class="form-label">輸入值</label>
                            <input type="text" class="form-control" id="input-value" placeholder="請輸入值">
                        </div>
                        <div class="btn-group-custom">
                            <button class="btn btn-success" id="send-request">發送請求</button>
                        </div>
                    </div>
                </div>

                <!-- 請求狀態區 -->
                <div class="card">
                    <div class="card-body request-status">
                        <h5 class="card-title">請求狀態</h5>
                        <div id="status-container"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const tableBody = document.getElementById('data-table');
        const tableHeader = document.getElementById('table-header');
        const statusContainer = document.getElementById('status-container');
        let maxParams = 0;

        function updateTableHeader(paramCount) {
            if (paramCount > maxParams) {
                tableHeader.innerHTML = '';
                for (let i = 1; i <= paramCount; i++) {
                    const th = document.createElement('th');
                    th.textContent = `Parameter${i}`;
                    tableHeader.appendChild(th);
                }
                maxParams = paramCount;

                const rows = tableBody.getElementsByTagName('tr');
                for (let row of rows) {
                    const currentCells = row.getElementsByTagName('td');
                    const currentLength = currentCells.length;
                    if (currentLength < paramCount) {
                        for (let i = currentLength; i < paramCount; i++) {
                            const td = document.createElement('td');
                            td.innerHTML = '<input type="text" class="form-control" value="">';
                            row.appendChild(td);
                        }
                    }
                }
            }
        }

        function addRow(data = []) {
            const row = document.createElement('tr');
            const columnCount = data.length || maxParams;
            updateTableHeader(columnCount);

            let cells = '';
            for (let i = 0; i < columnCount; i++) {
                const value = data[i] || '';
                cells += `<td><input type="text" class="form-control" value="${value}"></td>`;
            }
            row.innerHTML = cells;
            tableBody.appendChild(row);
            saveToLocalStorage();
        }

        function saveToLocalStorage() {
            const rows = tableBody.getElementsByTagName('tr');
            const tableData = Array.from(rows).map(row => {
                const inputs = row.getElementsByTagName('input');
                return Array.from(inputs).map(input => input.value.trim());
            });
            
            const config = {
                tableData: tableData,
                requestMethod: document.getElementById('request-method').value,
                getUrlTemplate: document.getElementById('get-url-template').value,
                postUrlTemplate: document.getElementById('post-url-template').value,
                postBodyTemplate: document.getElementById('post-body-template').value,
                inputPreModifyRemove: document.getElementById('input-pre-modify-remove').value,
                inputPreModifyAdd: document.getElementById('input-pre-modify-add').value,
                requestInterval: document.getElementById('request-interval').value
            };
            
            localStorage.setItem('requestConfig', JSON.stringify(config));
        }

        function loadFromLocalStorage() {
            const savedConfig = localStorage.getItem('requestConfig');
            if (savedConfig) {
                const config = JSON.parse(savedConfig);
                applyConfig(config);
            }
        }

        function applyConfig(config) {
            tableBody.innerHTML = '';
            config.tableData.forEach(values => addRow(values));
            document.getElementById('request-method').value = config.requestMethod || 'GET';
            document.getElementById('get-url-template').value = config.getUrlTemplate || '';
            document.getElementById('post-url-template').value = config.postUrlTemplate || '';
            document.getElementById('post-body-template').value = config.postBodyTemplate || '';
            document.getElementById('input-pre-modify-remove').value = config.inputPreModifyRemove || 'IMEI=';
            document.getElementById('input-pre-modify-add').value = config.inputPreModifyAdd || '';
            document.getElementById('request-interval').value = config.requestInterval || '3000';
            document.getElementById('get-config').style.display = config.requestMethod === 'GET' ? 'block' : 'none';
            document.getElementById('post-config').style.display = config.requestMethod === 'POST' ? 'block' : 'none';
            saveToLocalStorage();
        }

        function clearStorage() {
            if (confirm('確定要清空所有儲存的數據嗎？此操作無法復原！')) {
                localStorage.removeItem('requestConfig');
                tableBody.innerHTML = '';
                maxParams = 0;
                tableHeader.innerHTML = '';
                document.getElementById('request-method').value = 'GET';
                document.getElementById('get-url-template').value = '';
                document.getElementById('post-url-template').value = '';
                document.getElementById('post-body-template').value = '';
                document.getElementById('input-pre-modify-remove').value = 'IMEI=';
                document.getElementById('input-pre-modify-add').value = '';
                document.getElementById('request-interval').value = '3000';
                document.getElementById('get-config').style.display = 'block';
                document.getElementById('post-config').style.display = 'none';
                statusContainer.innerHTML = '<div class="alert alert-success">已清空所有儲存數據</div>';
            }
        }

        function exportConfig() {
            const config = JSON.parse(localStorage.getItem('requestConfig') || '{}');
            const blob = new Blob([JSON.stringify(config, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `request-config-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            statusContainer.innerHTML = '<div class="alert alert-success">配置已匯出為 JSON 文件</div>';
        }

        function importConfig(event) {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const config = JSON.parse(e.target.result);
                    applyConfig(config);
                    statusContainer.innerHTML = '<div class="alert alert-success">配置已成功匯入</div>';
                } catch (error) {
                    statusContainer.innerHTML = `<div class="alert alert-danger">匯入失敗：無效的 JSON 格式 (${error.message})</div>`;
                }
            };
            reader.readAsText(file);
            document.getElementById('import-config').value = '';
        }

        document.getElementById('batch-submit').addEventListener('click', () => {
            const input = document.getElementById('batch-input').value;
            const lines = input.trim().split('\n').map(line => line.trim().split(/\s+/).filter(Boolean));
            if (lines.length === 0) return;
            lines.forEach(values => addRow(values));
            document.getElementById('batch-input').value = '';
        });

        document.getElementById('add-row').addEventListener('click', () => {
            addRow([]);
        });

        document.getElementById('request-method').addEventListener('change', (e) => {
            const method = e.target.value;
            document.getElementById('get-config').style.display = method === 'GET' ? 'block' : 'none';
            document.getElementById('post-config').style.display = method === 'POST' ? 'block' : 'none';
            saveToLocalStorage();
        });

        ['get-url-template', 'post-url-template', 'post-body-template', 'input-pre-modify-remove', 
         'input-pre-modify-add', 'request-interval'].forEach(id => {
            document.getElementById(id).addEventListener('change', saveToLocalStorage);
        });

        document.getElementById('toggle-advanced').addEventListener('click', () => {
            const advancedSettings = document.getElementById('advanced-settings');
            advancedSettings.classList.toggle('show');
        });

        async function sendRequest(method, url, body = null) {
            try {
                const options = { method };
                if (method === 'POST' && body) {
                    options.headers = { 'Content-Type': 'application/json' };
                    options.body = JSON.stringify(body);
                }
                const response = await fetch(url, options);
                const data = await response.text();
                return { success: true, data };
            } catch (error) {
                return { success: false, error: error.message };
            }
        }

        function formatResponse(text, isSuccess) {
            const maxLength = 200;
            let formattedText = text.trim();
            if (formattedText.length > maxLength) {
                formattedText = `${formattedText.substring(0, maxLength)} ... (點擊展開)`;
            }
            return `<div class="result ${isSuccess ? 'success' : 'error'}">${formattedText}</div>`;
        }

        function preModifyInput(input, removeRule, addRule) {
            let modifiedInput = input;
            if (removeRule) {
                modifiedInput = modifiedInput.replace(removeRule, '');
            }
            if (addRule) {
                modifiedInput = addRule + modifiedInput;
            }
            return modifiedInput;
        }

        document.getElementById('send-request').addEventListener('click', async () => {
            let InputValue = document.getElementById('input-value').value.trim();
            if (!InputValue) {
                statusContainer.innerHTML = '<div class="alert alert-warning">請輸入值</div>';
                return;
            }

            const preModifyRemoveRule = document.getElementById('input-pre-modify-remove').value.trim();
            const preModifyAddRule = document.getElementById('input-pre-modify-add').value.trim();
            InputValue = preModifyInput(InputValue, preModifyRemoveRule, preModifyAddRule);
            const method = document.getElementById('request-method').value;
            const rows = tableBody.getElementsByTagName('tr');
            const interval = parseInt(document.getElementById('request-interval').value) || 0;

            statusContainer.innerHTML = '';

            if (rows.length === 0) {
                statusContainer.innerHTML = '<div class="alert alert-warning">表格中無數據，請先添加參數</div>';
                return;
            }

            for (let i = 0; i < rows.length; i++) {
                await new Promise(resolve => setTimeout(resolve, interval * i));

                const inputs = rows[i].getElementsByTagName('input');
                const params = { InputValue };
                for (let j = 0; j < inputs.length; j++) {
                    params[`Parameter${j + 1}`] = inputs[j].value.trim() || '';
                }

                const statusItem = document.createElement('div');
                statusItem.className = 'status-item';
                statusItem.innerHTML = `
                    <div class="status-header">
                        <span class="status-number">請求 ${i + 1}/${rows.length}</span>
                        <span class="status-url"></span>
                    </div>
                    <div class="progress">
                        <div class="progress-bar" role="progressbar" style="width: 50%;" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                    <div class="result-container mt-2"></div>
                `;
                statusContainer.appendChild(statusItem);
                const urlSpan = statusItem.querySelector('.status-url');
                const progressBar = statusItem.querySelector('.progress-bar');
                const resultContainer = statusItem.querySelector('.result-container');

                if (method === 'GET') {
                    let url = document.getElementById('get-url-template').value;
                    for (const [key, value] of Object.entries(params)) {
                        url = url.replace(new RegExp(`{${key}}`, 'g'), encodeURIComponent(value));
                    }
                    urlSpan.textContent = url;
                    const response = await sendRequest('GET', url);
                    if (response.success) {
                        progressBar.style.width = '100%';
                        progressBar.classList.add('bg-success');
                        statusItem.classList.add('status-success');
                        resultContainer.innerHTML = formatResponse(`成功：${response.data}`, true);
                    } else {
                        progressBar.style.width = '100%';
                        progressBar.classList.add('bg-danger');
                        statusItem.classList.add('status-error');
                        resultContainer.innerHTML = formatResponse(`失敗：${response.error}`, false);
                    }
                } else if (method === 'POST') {
                    let url = document.getElementById('post-url-template').value;
                    let bodyStr = document.getElementById('post-body-template').value.trim();
                    for (const [key, value] of Object.entries(params)) {
                        url = url.replace(new RegExp(`{${key}}`, 'g'), encodeURIComponent(value));
                        bodyStr = bodyStr.replace(new RegExp(`{${key}}`, 'g'), value);
                    }
                    bodyStr = bodyStr.replace(/,\s*}/g, '}').replace(/\s+/g, ' ');
                    urlSpan.textContent = `${url} (Body: ${bodyStr})`;
                    try {
                        const body = JSON.parse(bodyStr);
                        const formattedBody = JSON.stringify(body, null, 2);
                        resultContainer.innerHTML = formatResponse(`生成的 JSON:\n${formattedBody}`, true);
                        const response = await sendRequest('POST', url, body);
                        if (response.success) {
                            progressBar.style.width = '100%';
                            progressBar.classList.add('bg-success');
                            statusItem.classList.add('status-success');
                            resultContainer.innerHTML += formatResponse(`成功：${response.data}`, true);
                        } else {
                            progressBar.style.width = '100%';
                            progressBar.classList.add('bg-danger');
                            statusItem.classList.add('status-error');
                            resultContainer.innerHTML += formatResponse(`失敗：${response.error}`, false);
                        }
                    } catch (e) {
                        progressBar.style.width = '100%';
                        progressBar.classList.add('bg-danger');
                        statusItem.classList.add('status-error');
                        resultContainer.innerHTML = formatResponse(`JSON 格式錯誤: ${e.message}`, false);
                    }
                }
            }
        });

        document.getElementById('clear-storage').addEventListener('click', clearStorage);

        document.getElementById('export-config').addEventListener('click', exportConfig);

        document.getElementById('import-config-btn').addEventListener('click', () => {
            document.getElementById('import-config').click();
        });

        document.getElementById('import-config').addEventListener('change', importConfig);

        document.addEventListener('DOMContentLoaded', () => {
            loadFromLocalStorage();
        });
    </script>
</body>
</html>
